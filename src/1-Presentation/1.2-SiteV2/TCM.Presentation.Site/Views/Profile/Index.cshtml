@inject TCM.Services.Interfaces.Services.IUserServices _userServices
@inject TCM.Services.Interfaces.Services.IConnectionServices _connectionServices
@inject TCM.Services.Interfaces.Services.ICollectionServices _collectionServices
@inject TCM.Services.Interfaces.Services.ICollectionItemServices _collectionItemServices
@inject TCM.Services.Interfaces.Services.ICollectionItemUserServices _collectionItemUserServices
@inject TCM.Services.Interfaces.Services.IChatServices _chatServices
@inject TCM.Services.Interfaces.Services.ICollectionItemSharedServices _collectionItemSharedServices

@using TCM.Services.Model.Enum;
@using TCM.Services.Model;
@using System.Linq;
@{

    var connectionUserId = 0;
    var user = new UserModel();

    if (ViewBag.ConnectionUserId > 0)
    {
        user = (await _userServices.GetUserAsync(new UserModel() { Id = ViewBag.ConnectionUserId })).FirstOrDefault();

        connectionUserId = user.Id.Value;


    }
    else
    {
        var currentUser = _userServices.CurrentUserAsync();

        user.UserName = currentUser.UserName;
        user.Id = currentUser.Id;
        user.ProfileId = (TCM.Services.Model.Enum.UserType)currentUser.ProfileId;

    }


    var resultUsers = (await _connectionServices.GetConnectionAsync(user.Id.Value))
        .Where(connection => connection.ConnectionUserConnectionStatusId == (int)ConnectionStatusType.Approved).ToList();


    var resultConnections = (await _connectionServices.GetConnectionAsync(new ConnectionModel() { ConnectionUserId = user.Id }));

    var chatUser = (await _chatServices.GetChatAsync(new ChatModel() { ChatUserId = user.Id }));

    var chatConnection = (await _chatServices.GetChatAsync(new ChatModel() { ChatConnectionUserId = user.Id }));

    var chatAll = chatUser.Concat(chatConnection).ToList().Where(x => x.ChatIsRead == false && (x.ChatUserId == user.Id || x.ChatConnectionUserId == user.Id)).ToList();

    var results = resultUsers.Concat(resultConnections).ToList();

    var countCollectionCompleted = await _collectionServices.GetCountCollectionCompletedAsync(user.Id.Value);
    var countConnection = results.Count();
    var countChateUnRead = chatAll.Count();
    var collections = await _collectionServices.GetCollectionAsync();
    var collectionsItens = await _collectionItemServices.GetCollectionItemAsync();

}
@section Styles {
<style>
    .code {
        text-align: center;
        letter-spacing: 15px;
    }

    .message {
        color: #000;
        clear: both;
        line-height: 18px;
        font-size: 15px;
        padding: 8px;
        position: relative;
        margin: 8px 0;
        max-width: 85%;
        word-wrap: break-word;
        z-index: -1;
    }

        .message:after {
            position: absolute;
            content: "";
            width: 0;
            height: 0;
            border-style: solid;
        }

        .message.sent {
            background: #e1ffc7;
            border-radius: 5px 0px 5px 5px;
            float: right;
        }

            .message.sent:after {
                border-width: 0px 0 10px 10px;
                border-color: transparent transparent transparent #e1ffc7;
                top: 0;
                right: -10px;
            }

        .message.received {
            background: #000000;
            border-radius: 0px 5px 5px 5px;
            float: left;
        }

            .message.received .metadata {
                padding: 0 0 0 16px;
            }

            .message.received:after {
                border-width: 0px 10px 10px 0;
                border-color: transparent #fff transparent transparent;
                top: 0;
                left: -10px;
            }

    .grid_template_collectible_3x3 {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        align-items: center;
        grid-gap: 2px;
        margin-bottom: 16px;
        grid-auto-columns: 175px;
    }

    .grid_template_collectible_2x2 {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        align-items: center;
        grid-gap: 2px;
        margin-bottom: 16px;
        grid-auto-columns: 117px;
    }

    .grid-auto-columns-1 {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        grid-auto-columns: 348px;
    }

    .image-grid {
        display: flex;
        flex-wrap: nowrap; /* Impede que as imagens quebrem para a próxima linha */
    }

    .area_grid_collectible_int {
        display: flex;
        flex-direction: column;
        width: 100%;
    }

    .area_grid_collectible {
        display: block;
    }

    .opacityImage-collection-item {
        opacity: 0.3;
    }

    .opacityImage-collection-item-display-full {
        opacity: 1;
        cursor: pointer;
    }

</style>

}
@section Scripts {

    <script src="~/StaticFiles/js/search.js"></script>
    <script src="~/StaticFiles/js/profile.js"></script>
}
<!-- BEGIN page-header -->
<h1 class="page-header">Profile <small>show profile...</small></h1>
<!-- END page-header -->
<div class="row">
    <div class="col-xl-10 ">
        <table class="table table-tbody-bordered table-sm fw-bold m-0">
            <tbody>
                <tr>
                    <td class="h-50px">
                        Hello, @user.UserName
                        @if (ViewBag.ConnectionUserId == 0)
                        {
                            <a href="/Configuration"><i class='fa fa-pen'></i></a>
                        }
                    </td>
                </tr>
            </tbody>
        </table>
        <table class="table table-tfoot-bordered table-sm fw-bold m-0 align-self-center">
            <tbody>
                <tr>
                    <td class="w-25 align-self-center">
                        <img src="~/StaticFiles/tcm/img/collectibles.png" alt=""><span class="fs-22px fw-bold text-orange-700">@countCollectionCompleted</span><br />
                        collectibles

                    </td>
                    <td class="w-25 align-self-center">
                        <img src="~/StaticFiles/tcm/img/connections.png" alt=""><span class="fs-22px fw-bold text-orange-700">@countConnection</span><br />
                        connections
                    </td>
                    <td class="w-25 align-self-center">
                        <img src="~/StaticFiles/tcm/img/chats.png" alt=""><span class="fs-22px fw-bold text-orange-700">@countChateUnRead</span><br />
                        chats
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-xl-10">
        <div class="area_grid_collectible_int mt-2 align-items-center">
            <div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @foreach (var item in collections)
                    {
                        var collectionsItemCollectable = collectionsItens.Where(x => x.CollectionId == item.Id && x.CollectionItemTypeIsCollectible).ToList();
                        var collectionItemUsers = await _collectionItemUserServices.GetCollectionItemUserAsync(item.Id, user.Id.Value);
                        var styleGrid = "";
                        var colspanGrid = 0;

                        if (collections.Where(x => x.Id == item.Id).FirstOrDefault().CollectionTypeQuantity == 1)
                        {
                            styleGrid = "grid-auto-columns-1";
                        }
                        else if (collections.Where(x => x.Id == item.Id).FirstOrDefault().CollectionTypeQuantity == 4)
                        {
                            styleGrid = "grid_template_collectible_2x2";
                            colspanGrid = 2;
                        }
                        else if (collections.Where(x => x.Id == item.Id).FirstOrDefault().CollectionTypeQuantity == 9)
                        {

                            styleGrid = "grid_template_collectible_3x3";
                            colspanGrid = 3;
                        }
                        <div class="carousel-item @(collections.FirstOrDefault().Id == item.Id ? "active": "")">
                            <div class="@styleGrid">
                                @foreach (var itemCollectable in collectionsItemCollectable)
                                {
                                    var existsCollectionItem = (await _collectionItemSharedServices.GetCollectionItemSharedAsync(new CollectionItemSharedModel() { UserId = user.Id.Value, CollectionItemId = itemCollectable.Id })).Any();
                                    if (existsCollectionItem)
                                    {
                                        <img id="imgCollectionItem" onclick="showAlert('@itemCollectable.Id')" src="@(string.Concat(itemCollectable.Url ))" data-id="@itemCollectable.Id" data-url="@(string.Concat(itemCollectable.Url ))"
                                             @(!existsCollectionItem ? "class=opacityImage-collection-item" : "class=opacityImage-collection-item-display-full")
                                             alt="@itemCollectable.Description"
                                             width="@itemCollectable.CollectionItemTypeWidth"
                                             height="@itemCollectable.CollectionItemTypeHeigh" />

                                    }
                                    else
                                    {
                                        <img id="imgCollectionItem" src="@(string.Concat(itemCollectable.Url ))" data-id="@itemCollectable.Id" data-url="@(string.Concat(itemCollectable.Url ))"
                                             @(!existsCollectionItem ? "class=opacityImage-collection-item" : "class=opacityImage-collection-item-display-full")
                                             alt="@itemCollectable.Description"
                                             width="@itemCollectable.CollectionItemTypeWidth"
                                             height="@itemCollectable.CollectionItemTypeHeigh" />

                                    }
                                }
                            </div>
                        </div>
                    }

                </div>
            </div>

        </div>

    </div>
</div>