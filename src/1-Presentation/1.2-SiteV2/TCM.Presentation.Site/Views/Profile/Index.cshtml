@inject TCM.Services.Interfaces.Services.IUserServices _userServices
@inject TCM.Services.Interfaces.Services.IConnectionServices _connectionServices
@inject TCM.Services.Interfaces.Services.ICollectionServices _collectionServices
@inject TCM.Services.Interfaces.Services.ICollectionItemServices _collectionItemServices
@inject TCM.Services.Interfaces.Services.ICollectionItemUserServices _collectionItemUserServices
@inject TCM.Services.Interfaces.Services.IChatServices _chatServices

@using TCM.Services.Model.Enum;
@using TCM.Services.Model;
@using System.Linq;
@{

    var connectionUserId = 0;
    var user = new UserModel();

    if (ViewBag.ConnectionUserId > 0)
    {
        user = (await _userServices.GetUserAsync(new UserModel() { Id = ViewBag.ConnectionUserId })).FirstOrDefault();

        connectionUserId = user.Id.Value;


    }
    else
    {
        var currentUser = _userServices.CurrentUserAsync();

        user.UserName = currentUser.UserName;
        user.Id = currentUser.Id;
        user.ProfileId = (TCM.Services.Model.Enum.UserType)currentUser.ProfileId;

    }


    var resultUsers = (await _connectionServices.GetConnectionAsync(user.Id.Value))
        .Where(connection => connection.ConnectionUserConnectionStatusId == (int)ConnectionStatusType.Approved).ToList();


    var resultConnections = (await _connectionServices.GetConnectionAsync(new ConnectionModel() { ConnectionUserId = user.Id }));

    var chatUser = (await _chatServices.GetChatAsync(new ChatModel() { ChatUserId = user.Id }));

    var chatConnection = (await _chatServices.GetChatAsync(new ChatModel() { ChatConnectionUserId = user.Id }));

    var chatAll = chatUser.Concat(chatConnection).ToList().Where(x => x.ChatIsRead == false).ToList();

    var results = resultUsers.Concat(resultConnections).ToList();

    var countCollectionCompleted = await _collectionServices.GetCountCollectionCompletedAsync(user.Id.Value);
    var countConnection = results.Count();
    var countChateUnRead = chatAll.Count();
    var collections = await _collectionServices.GetCollectionAsync();
    var collectionsItens = await _collectionItemServices.GetCollectionItemAsync();

}
@section Styles {
    <link href="~/StaticFiles/lib/datatables.net-bs5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <link href="~/StaticFiles/lib/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css" rel="stylesheet" />
    <link href="~/StaticFiles/assets/plugins/summernote/dist/summernote-lite.css" rel="stylesheet" />

}
@section Scripts {
    <script src="~/StaticFiles/js/search.js"></script>
    <script src="~/StaticFiles/js/profile.js"></script>
    <script src="~/StaticFiles/lib/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/StaticFiles/lib/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
    <script src="~/StaticFiles/lib/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/StaticFiles/lib/datatables.net-responsive-bs5/js/responsive.bootstrap5.min.js"></script>
    <script src="~/StaticFiles/js/demo/table-manage-responsive.demo.js"></script>
    <script src="~/StaticFiles/lib/@@highlightjs/cdn-assets/highlight.min.js"></script>
    <script src="~/StaticFiles/js/demo/render.highlight.js"></script>
    <script src="~/StaticFiles/assets/plugins/summernote/dist/summernote.js"></script>
    <script src="~/StaticFiles/lib/sweetalert/dist/sweetalert.min.js"></script>
    <script src="~/StaticFiles/js/demo/ui-modal-notification.demo.js"></script>
}
<!-- BEGIN page-header -->
<h1 class="page-header">Profile <small>show profile...</small></h1>
<!-- END page-header -->
<div class="row">
    <div class="col-xl-10 ">
        <table class="table table-tbody-bordered table-sm fw-bold m-0">
            <tbody>
                <tr>
                    <td class="h-50px">
                        Hello, @user.UserName
                        @if (ViewBag.ConnectionUserId == 0)
                        {
                            <a href="/Configuration"><i class='fa fa-pen'></i></a>
                        }
                    </td>
                </tr>
            </tbody>
        </table>
        <table class="table table-tfoot-bordered table-sm fw-bold m-0 align-self-center">
            <tbody>
                <tr>
                    <td class="w-25 align-self-center">
                        <img src="~/StaticFiles/img/collectibles.png" alt=""><span class="fs-22px fw-bold text-orange-700">@countCollectionCompleted</span><br />
                        collectibles

                    </td>
                    <td class="w-25 align-self-center">
                        <img src="~/StaticFiles/img/connections.png" alt=""><span class="fs-22px fw-bold text-orange-700">@countConnection</span><br />
                        connections
                    </td>
                    <td class="w-25 align-self-center">
                        <img src="~/StaticFiles/img/chats.png" alt=""><span class="fs-22px fw-bold text-orange-700">@countChateUnRead</span><br />
                        chats
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-xl-10">
        <div class="area_grid_collectible_int mt-2 align-items-center">
            <div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @foreach (var item in collections)
                    {
                        var collectionsItemCollectable = collectionsItens.Where(x => x.CollectionId == item.Id && x.CollectionItemTypeIsCollectible).ToList();
                        var collectionItemUsers = await _collectionItemUserServices.GetCollectionItemUserAsync(item.Id, user.Id.Value);
                        var styleGrid = "";
                        var colspanGrid = 0;

                        if (collections.Where(x => x.Id == item.Id).FirstOrDefault().CollectionTypeQuantity == 1)
                        {
                            styleGrid = "grid-auto-columns-1";
                        }
                        else if (collections.Where(x => x.Id == item.Id).FirstOrDefault().CollectionTypeQuantity == 4)
                        {
                            styleGrid = "grid_template_collectible_2x2";
                            colspanGrid = 2;
                        }
                        else if (collections.Where(x => x.Id == item.Id).FirstOrDefault().CollectionTypeQuantity == 9)
                        {

                            styleGrid = "grid_template_collectible_3x3";
                            colspanGrid = 3;
                        }
                        <div class="carousel-item @(collections.FirstOrDefault().Id == item.Id ? "active": "")">
                            <div class="@styleGrid">
                                @foreach (var itemCollectable in collectionsItemCollectable)
                                {
                                    var existsCollectionItem = collectionItemUsers.Where(x => x.CollectionItemId == itemCollectable.Id).Any();
                                    <img id="imgCollectionItem" onclick="showAlert('@itemCollectable.Id')" src="@(string.Concat("/StaticFiles/tcm/", itemCollectable.Url ))" data-id="@itemCollectable.Id" data-url="@(string.Concat("/tcm/", itemCollectable.Url ))"
                                         @(!existsCollectionItem ? "class=opacityImage-collection-item" : "class=opacityImage-collection-item-display-full")
                                         alt="@itemCollectable.Description"
                                         width="@itemCollectable.CollectionItemTypeWidth"
                                         height="@itemCollectable.CollectionItemTypeHeigh" />
                                }
                            </div>
                        </div>
                    }

                </div>
            </div>

        </div>

    </div>
</div>