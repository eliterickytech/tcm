@inject TCM.Services.Interfaces.Services.ICollectionItemServices _collectionItemServices
@inject TCM.Services.Interfaces.Services.ICollectionItemUserServices _collectionItemUserServices
@inject TCM.Services.Interfaces.Services.ICollectionServices _collectionServices
@{
    var collections = await _collectionServices.GetCollectionAsync();
}
<form novalidate class="needs-validation" enctype="multipart/form-data"
      data-ajax="true"
      data-ajax-mode="replace"
      data-ajax-loading="#loader"
      asp-action="RemovingCollection"
      asp-controller="ManagerCollection"
      data-ajax-success="Success">
    @Html.AntiForgeryToken()
    <table width="100%">
        <tr>
            <td class="text-default text-weight-bold">
                Collections
            </td>
        </tr>
        @foreach (var collection in collections)
        {
            var countingCollectionItems = 0;
            var collectionItems = (await _collectionItemServices.GetCollectionItemAsync(collection.Id));
            <tr>
                <td style="width:5%">
                    <input type="radio" id="collectionId" checked class="form-check-input" style="padding: 0px 0px 0px 0px !important" name="radioCollection" value="@collection.Id" />
                </td>
                <td>
                    <img class="box_image_collection" src="@collectionItems.Where(x => x.CollectionItemTypeId == (int) TCM.Services.Model.Enum.CollectionItemType.MiniImage).FirstOrDefault().Url" />
                </td>
                <td class="text-default text-weight-bold">
                    @collection.CollectionName
                    <table style="width:100%">
                        <tr style="vertical-align: top; width: 70%">
                            @for (int i = 0; i < 5; i++)
                            {
                                var items = collectionItems.Where(x => x.CollectionItemTypeIsCollectible).ToList();
                                <td style="width:55px">
                                    @if (items.Count() > i)
                                    {
                                        <img class="box_image-remove" src="@items[i].Url" width="30" height="30" />
                                    }
                                </td>

                                if (countingCollectionItems == 4)
                                {
                                    <td class="@(items.Count() > 4 ? "box_image-remove": "")" width="30" height="30">
                                        @(items.Count() > 4 ? "+4": "")
                                    </td>
                                    break;
                                }

                                countingCollectionItems += 1;
                            }
                        </tr>
                    </table>
                </td>
            </tr>
        }
    </table>
    <table width="100%">
        <tr>
            <td style="height: 100px; text-align:right; align-items:flex-end">
                <input type="submit" id="submit" name="submit" class="next operador" value="DELETE SELECTED" style="float: right" />
            </td>
        </tr>
    </table>
</form>

<script>
    (() => {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
            }, false)
        })
    })()

    function Success(data) {
        var response = JSON.parse(JSON.stringify(data.data));

        window.location.href = "/Home/adm";
    }
</script>
