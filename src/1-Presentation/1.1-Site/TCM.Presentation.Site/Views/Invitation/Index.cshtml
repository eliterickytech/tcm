@using TCM.Services.Model.Enum;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_LayoutLogin";
}

@using System.Linq;
@{
    var _connectionModels = (List<TCM.Services.Model.ConnectionModel>)TempData["Connection"];
    List<TCM.Services.Model.ResultSearchModel> searchUsers = new List<TCM.Services.Model.ResultSearchModel>();

    if (TempData["SearchInvitationUser"] != null)
    {
        searchUsers = (List<TCM.Services.Model.ResultSearchModel>)TempData["SearchInvitationUser"];
    }
}
<link src="../../css/style.css" />
<div class="area_home">
    @await Html.PartialAsync("~/Views/Shared/User/_PartialMenu.cshtml")

    @await Html.PartialAsync("~/Views/Shared/User/_PartialSearchInvitation.cshtml")

    <div class="area_chats_all">
        <div class="area_texts_chats">

            <div class="my_invitations">
                <a href="chats_unread.html">
                    <h2>My Invitations</h2>
                    <div class="border_unread_u"></div>
                </a>
            </div>
        </div>
    </div>

    <div class="area_user_chats">
        <form data-ajax="true"
            asp-action="AddInvitation"
            asp-controller="Invitation"
            data-ajax-mode="replace"
            data-ajax-method="Post"
            data-ajax-success="OnSuccess"
            data-ajax-loading="#loader">

            @if (searchUsers.Any())
                {
                foreach (var item in searchUsers)
                    {
                        <div class="area_user_name_total">
                            <div class="user_name_chat">
                                <div class="user_name_text">
                                <h2>@item.Username</h2>
                                </div>
                                <div class="text_color_beige">
                                <p>
                                    @{
                                        if (item.ConnectionStatus == (int)ConnectionStatusType.Requested)
                                        {
                                            <button class="invitation-circle-send-disabled" type="button" disabled title="Request already sent">
                                                <i class="bi bi-person-fill-exclamation"></i>
                                            </button>
                                        }
                                        else if (item.ConnectionStatus == (int)ConnectionStatusType.Pending)
                                        {
                                            <button class="invitation-circle-send-disabled" type="button" disabled title="Pending request">
                                                <i class="bi bi-person-fill-exclamation"></i>
                                            </button>

                                        }
                                        else
                                        {
                                            <input type="hidden" id="ConnectionUserId" name="ConnectionUserId" value="@item.ConnectionUserId" />
                                            <button data-connetionuserid="@item.ConnectionUserId" class="invitation-circle-send" type="submit" title="Add Connection">
                                                <i class="bi bi-person-fill-add"></i>
                                            </button>
                                        }

                                    }
                                </p>
                                </div>
                            </div>
                        </div>
                        @if (item.ConnectionStatus != null)
                        {
                            <div class="user_name_chat">
                                <div class="message_chat">
                                    <h2>@Enum.GetName(typeof(ConnectionStatusType), item.ConnectionStatus) </h2>
                                </div>

                            </div>
                        }
                    }
                }
        </form>

    </div>

    @await Html.PartialAsync("~/Views/Shared/User/_PartialFooter.cshtml")
</div>
<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (() => {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
            }, false)
        })
    })()

    function OnSuccess(data) {
        window.location.href = "/Connection/Index"
    }
</script>


